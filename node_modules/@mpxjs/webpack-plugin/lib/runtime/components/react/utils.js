
import {
  StyleSheet,
  PanResponder
} from 'react-native'

import * as React from 'react'
import { useEffect, useRef, useState } from 'react'


const TEXT_STYLE_REGEX = /color|font.*|text.*|letterSpacing|lineHeight|includeFontPadding|writingDirection/

export const extracteTextStyle = (style)  => {
  const flattenStyle = StyleSheet.flatten(style)
  const textStyle = {}
  if (flattenStyle) {
    Object.keys(flattenStyle).forEach((key) => {
      if (TEXT_STYLE_REGEX.test(key)) {
        textStyle[key] = flattenStyle[key]
      }
    })
  }
  return textStyle
}


export const clickableHandlers = [
  'onStartShouldSetResponder',
  'onMoveShouldSetResponder',
  'onResponderEnd',
  'onResponderGrant',
  'onResponderReject',
  'onResponderMove',
  'onResponderRelease',
  'onResponderStart',
  'onResponderStart',
  'onResponderTerminationRequest',
  'onResponderTerminate',
  'onMoveShouldSetResponderCapture',
]

const getWxAppEvent = (event) => {
  const nativeEvent = event.nativeEvent
  console.log(">>> event", nativeEvent)
  const { timestamp, target, pageX, pageY, touches = [], changedTouches = [] } = nativeEvent
  return {
    type: 'tap',
    timeStamp: timestamp,
    target: {
      id: target,
      dataset: {}
    },
    currentTarget: {
      id: target,
      dataset: {}
    },
    detail: {
      x: pageX,
      y: pageY
    },
    touches: touches.map((item) => {
      return {
        identifier: item.identifier,
        pageX: item.pageX,
        pageY: item.pageY,
        clientX: item.locationX,
        clientY: item.locationY
      }
    }),
    changedTouches: changedTouches.map((item) => {
      return {
        identifier: item.identifier,
        pageX: item.pageX,
        pageY: item.pageY,
        clientX: item.locationX,
        clientY: item.locationY
      }
    })
  }
}


export const useClickable = (props) => {
  const {
    style,
    hoverStyle,
    // hoverStopPropagation,
    onClick,
    onLongPress,
    onTouchStart,
    // onTouchMove,
    // onTouchCancel,
    onTouchEnd,
  } = props

  // if (
  //   !hoverStyle &&
  //   // !hoverStopPropagation &&
  //   !onClick &&
  //   !onLongPress &&
  //   !onTouchStart &&
  //   // !onTouchMove &&
  //   // !onTouchCancel &&
  //   !onTouchEnd
  // ) {
  //   return props
  // }

  const ref = useRef({
    props: props
  })

  useEffect(() => {
    ref.current.props = props
  })

  const panResponder = useRef(
    PanResponder.create({
      onStartShouldSetPanResponder: () => {
        const {
          hoverStyle,
          onClick,
          onLongPress,
          onTouchStart,
          // onTouchMove,
          // onTouchCancel,
          onTouchEnd
        } = ref.current.props
        return !!(hoverStyle || onClick || onLongPress || onTouchStart || onTouchEnd)
      },
      onShouldBlockNativeResponder: () => false,
      onPanResponderGrant: (evt) => {
        const { onTouchStart } = ref.current.props
        onTouchStart && onTouchStart(getWxAppEvent(evt))
        ref.current.startTimestamp = evt.nativeEvent.timestamp
        // setStartTimer()
      },
      onPanResponderTerminationRequest: () => true,
      onPanResponderRelease: (evt, gestureState) => {
        const { onClick, onLongPress, onTouchEnd } = ref.current.props
        onTouchEnd && onTouchEnd(getWxAppEvent(evt))
        const endTimestamp = evt.nativeEvent.timestamp
        const gapTime = endTimestamp - ref.current.startTimestamp
        // return 
        // 1 =>3, 修复部分android机型(三星折叠屏尤为明显),单击时dx,dy为>1，而被误判为move的情况。
        const hasMove = Math.abs(gestureState.dx) >= 3 || Math.abs(gestureState.dy) >= 3
        if (!hasMove) {
          if (gapTime <= 350) {
            console.log(">>> call onClick", typeof onClick)
            // console.log(">>> getWxAppEvent(evt)")
            onClick && onClick(evt)
          } else {
            onLongPress && onLongPress(getWxAppEvent(evt))
          }
        }
        // setStayTimer()
      },
      onPanResponderTerminate: () => {
        // const { onTouchCancel } = this.props
        // onTouchCancel && onTouchCancel(this.getWxAppEvent(evt))
        // setStayTimer()
      }
    })
  ).current


  return {
    ...panResponder.panHandlers,
    style: [{ backgroundColor: 'transparent' }, style]
  }
}
