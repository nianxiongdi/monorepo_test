import { View, Text, StyleProp, ViewProps, ViewStyle, } from 'react-native'
import * as React from 'react'

// import { extracteTextStyle, useClickable } from '@mpxjs/webpack-plugin/lib/runtime/components/react/utils'


// const stringToText = (child, props) => {
//   // TODO: 实现小程序中效果
//   if (typeof child === 'string' || typeof child === 'number') {
//     // textNode节点
//     return <Text {...props}>{child}</Text>
//   }
//   return child
// }

// 兼容View中没用Text包裹的文字 防止报错 直接继承props在安卓中文字会消失？？？
// const renderChildren = (children, props) => {
//   let textStyle = null
//   if (Array.isArray(children)) {
//     return children.map((child, i) => {
//       if ((typeof child === 'string' || typeof child === 'number') && !textStyle) {
//       // 存在textNode，解析textStyle
//         textStyle = extracteTextStyle(props.style)
//       }
//       return stringToText(child, { key: i, ...props, style: textStyle })
//     })
//   } else {
//     if ((typeof children === 'string' || typeof children === 'number') && !textStyle) {
//       // 存在textNode，解析textStyle
//       textStyle = extracteTextStyle(props.style)
//     }
//     return stringToText(children, { ...props, style: textStyle })
//   }
// }

export interface _ViewProps extends ViewProps {
  onClick?: () => void;
  style?: StyleProp<ViewStyle>;
  children?: React.ReactNode;
}


const _View:React.FC<_ViewProps & React.RefAttributes<any>> = React.forwardRef((props: _ViewProps, ref: React.ForwardedRef<any>) => {
  const {
    style,
    children,
    onClick, // 
    ...otherProps
  } = props
  console.log(">>> _View _View props", otherProps)
  console.log(">>> _View 123 _View onClick", onClick)

  // const clickable = useClickable(props)
  // const clickable = useClikable(props) // 性能优化：从HOC替换成hooks，减少一层组件实例
  return (
    <View
      ref={ref}
      style={style}
      onTouchStart={() => {
        console.log(">>> start")
      }}
      onTouchMove={() => {
        console.log(">>> move")
      }}
      onTouchEnd = {(event) => {
        // event || {}
        onClick && onClick()
        console.log(">>> end", event)
      }}
      // {...clickable}
    >
      {children}
      {/* {renderChildren(children, props)} */}
    </View>
  )
})

_View.displayName = '_View'

export default _View

